# 9251. LCS

# 1. 1번 문자열과 2번 문자열의 크기에 해당하는 2차원 DP 배열을 생성한다.
# 2. 코드의 가독성을 증가시키기 위하여 각 문자열의 처음에 빈 문자열을 추가한다.
# 3. 처음부터 순회하면서 1번 문자열의 i번째 문자와 2번 문자열의 j번째 문자가 같다면
# 4. i-1번째 문자와 j-1번째 문자까지의 최장 공통부분 문자열 길이에서 1을 더한 값을 저장한다.
# 5. 다르다면 i-1번째 문자와 j번째 문자까지 혹은 i번째와 j-1번째 문자까지 최장공통부분문자열 길이 중 최댓값을 저장한다.
# 6. 최종 마지막 길이까지 작업을 완료한 후 두 문자열의 최장 공통부분 문자열의 길이를 출력한다.

# 최장 공통 부분문자열의 길이를 찾는다.

string1 = ' ' + input().rstrip()
string2 = ' ' + input().rstrip()

# 다음의 2차원 dp 배열은 각 i행 j열의 값이
# 1번 문자열의 i번째 값과 2번 문자열의 j번째 값까지의
# 최장 공통부분문자열의 길이를 저장하는 용도이다.
dp = [[0] * len(string2) for _ in range(len(string1))]

# 1번 문자열을 기준으로 하여
for i in range(1, len(string1)):
    # 2번 문자열을 순회하면서
    for j in range(1, len(string2)):
        # 1번 문자열의 i번째 문자와 2번 문자열의 j번째 문자가 같은 경우
        # i-1번째 문자와 j-1번째 문자까지의 최장 공통부분문자열의 길이에서 + 1한 값을 저장한다.
        if string1[i] == string2[j]:
            dp[i][j] = dp[i - 1][j - 1] + 1
        # 같지 않다면, i번째 문자와 j번째 문자까지 최장 공통부분문자열의 길이는
        # i-1번째와 j번째 문자까지 혹은 i번째와 j-1번째 문자까지의 최장 공통부분문자열의 길이이다.
        else:
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
            
print(dp[-1][-1])   # 두 문자열의 마지막 길이까지 작업을 완료한 후 최장 공통부분 문자열의 길이를 출력
