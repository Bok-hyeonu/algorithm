# 1300. K번째 수

# 1. 각 행은 각 행의 배수로 이루어져 있음(ex. 3번째 행의 원소는 모두 3의 배수 3 6 9 12)
# 2. 따라서 2차원 리스트에서 K번째 수는 K를 넘지 않음
# 3. 답을 1~K 사이 수로 특정하고 이진 탐색을 수행
# 4. 각 i번째 행에서 key값보다 작은 수의 수를 센다.
# 5. 그 개수는 key // i (각 행이 i의 배수로 이루어져 있으므로)
# 6. N개 행까지의 key값보다 작은 수의 개수가 K개를 넘지 않으면 key값보다 작은 수를 탐색
# 7. K개 이상이면 큰 수를 탐색

N = int(input())    # 2차원 배열의 크기
K = int(input())    # 전체 배열 오름차순 정렬했을 때 k번째 수

st = 1
ed = K
ans = 0

# 이진 탐색 수행
while st <= ed:
    key = (st + ed) // 2    # key값 지정
    cnt = 0                 # key값보다 작은 수
    
    # key값보다 작은 수 계산
    for i in range(1, N + 1):
        cnt += min(key // i, N)  # 작은 수 카운트(각 행의 최대 개수는 N개)
    
    # 중앙값보다 작은 수의 개수가 K개가 안 되면 좌측을 탐색
    if cnt < K:
        st = key + 1
    # 아니면 우측을 탐색
    else:
        ans = key
        ed = key - 1

print(ans)